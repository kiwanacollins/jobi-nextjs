name: Deploy to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/jobi-nextjs:latest,${{ secrets.DOCKERHUB_USERNAME }}/jobi-nextjs:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          # Stop and remove existing containers
          docker stop jobi-nextjs || true
          docker rm jobi-nextjs || true
          
          # Remove old images (keep last 3 versions)
          docker images ${{ secrets.DOCKERHUB_USERNAME }}/jobi-nextjs --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | tail -n +4 | awk '{print $3}' | xargs -r docker rmi || true
          
          # Pull latest image
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/jobi-nextjs:latest
          
          # Create .env file if it doesn't exist
          if [ ! -f /home/${{ secrets.VPS_USER }}/jobi-nextjs/.env.local ]; then
            mkdir -p /home/${{ secrets.VPS_USER }}/jobi-nextjs
            cat > /home/${{ secrets.VPS_USER }}/jobi-nextjs/.env.local << 'EOF'
          # Environment variables for production
          NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_CLERK_SIGN_IN_URL=${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }}
          NEXT_PUBLIC_CLERK_SIGN_UP_URL=${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }}
          NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=${{ secrets.NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL }}
          NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=${{ secrets.NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL }}
          CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
          WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET }}
          EOF
          fi
          
          # Run new container
          docker run -d \
            --name jobi-nextjs \
            --restart unless-stopped \
            -p 3000:3000 \
            --env-file /home/${{ secrets.VPS_USER }}/jobi-nextjs/.env.local \
            ${{ secrets.DOCKERHUB_USERNAME }}/jobi-nextjs:latest
          
          # Clean up unused Docker resources
          docker system prune -f
          
          # Health check
          echo "Waiting for application to start..."
          sleep 30
          
          # Check if container is running
          if docker ps | grep jobi-nextjs; then
            echo "✅ Deployment successful! Container is running."
            # Optional: Test endpoint
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Application is responding to requests."
            else
              echo "⚠️ Application may still be starting up."
            fi
          else
            echo "❌ Deployment failed! Container is not running."
            docker logs jobi-nextjs --tail 50
            exit 1
          fi

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment to VPS completed successfully!"
        else
          echo "❌ Deployment to VPS failed!"
        fi