name: Deploy to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/jobi-nextjs:latest,${{ secrets.DOCKERHUB_USERNAME }}/jobi-nextjs:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_CLERK_SIGN_IN_URL=${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }}
          NEXT_PUBLIC_CLERK_SIGN_UP_URL=${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }}
          NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=${{ secrets.NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL }}
          NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=${{ secrets.NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL }}
          NEXT_PUBLIC_TINY_EDITOR_API_KEY=${{ secrets.NEXT_PUBLIC_TINY_EDITOR_API_KEY }}
          NEXT_PUBLIC_SERVER_URL=${{ secrets.NEXT_PUBLIC_SERVER_URL }}
          NEXT_PUBLIC_SUPPRESS_HYDRATION_WARNINGS=${{ secrets.NEXT_PUBLIC_SUPPRESS_HYDRATION_WARNINGS }}
          MONGODB_URL=${{ secrets.MONGODB_URL }}
          MONGODB_DB_NAME=${{ secrets.MONGODB_DB_NAME }}

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          # Create deployment directory if it doesn't exist
          mkdir -p ${{ secrets.VPS_FOLDER }}
          
          # Navigate to deployment directory
          cd ${{ secrets.VPS_FOLDER }}
          
          # Download docker-compose.yml from repository
          curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/docker-compose.yml
          
          # Create/Update .env.local file
          cat > .env.local << 'EOF'
          # Clerk Authentication
          NEXT_PUBLIC_CLERK_SIGN_IN_URL=${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }}
          NEXT_PUBLIC_CLERK_SIGN_UP_URL=${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }}
          NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=${{ secrets.NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL }}
          NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=${{ secrets.NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL }}
          NEXT_CLERK_WEBHOOK_SECRET=${{ secrets.NEXT_CLERK_WEBHOOK_SECRET }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}

          # TinyMCE Editor
          NEXT_PUBLIC_TINY_EDITOR_API_KEY=${{ secrets.NEXT_PUBLIC_TINY_EDITOR_API_KEY }}

          # Server URL
          NEXT_PUBLIC_SERVER_URL=${{ secrets.NEXT_PUBLIC_SERVER_URL }}

          # MongoDB Configuration (Docker network)
          MONGODB_URL=mongodb://admin:${{ secrets.MONGO_ROOT_PASSWORD }}@jobi-mongodb:27017/jobiNextjs?authSource=admin
          MONGODB_DB_NAME=jobiNextjs

          # Next.js Settings
          NEXT_PUBLIC_SUPPRESS_HYDRATION_WARNINGS=${{ secrets.NEXT_PUBLIC_SUPPRESS_HYDRATION_WARNINGS }}

          # Admin Configuration
          ADMIN_EMAILS=${{ secrets.ADMIN_EMAILS }}

          # Cloudinary
          CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
          EOF
          
          # Pull latest images
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/jobi-nextjs:latest
          docker pull mongo:7.0
          
          # Stop and remove existing containers
          docker stop jobi-nextjs jobi-mongodb 2>/dev/null || true
          docker rm jobi-nextjs jobi-mongodb 2>/dev/null || true
          
          # Stop any MongoDB running on host (if installed via apt)
          sudo systemctl stop mongod 2>/dev/null || true
          
          # Kill any process using port 27017
          sudo lsof -ti:27017 | xargs -r sudo kill -9 2>/dev/null || true
          
          # Create Docker network if it doesn't exist
          docker network create jobi-network 2>/dev/null || true
          
          # Start MongoDB container
          docker run -d \
            --name jobi-mongodb \
            --restart unless-stopped \
            --network jobi-network \
            -p 27017:27017 \
            -e MONGO_INITDB_ROOT_USERNAME=admin \
            -e MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }} \
            -e MONGO_INITDB_DATABASE=jobiNextjs \
            -v mongodb_data:/data/db \
            mongo:7.0
          
          # Wait for MongoDB to be ready
          echo "Waiting for MongoDB to start..."
          sleep 15
          
          # Start Next.js application container
          docker run -d \
            --name jobi-nextjs \
            --restart unless-stopped \
            --network jobi-network \
            -p 3000:3000 \
            --env-file .env.local \
            ${{ secrets.DOCKERHUB_USERNAME }}/jobi-nextjs:latest
          
          # Health check
          echo "Waiting for application to start..."
          sleep 20
          
          # Check if containers are running
          if docker ps | grep -q jobi-nextjs && docker ps | grep -q jobi-mongodb; then
            echo "✅ Deployment successful! All containers are running."
            echo ""
            echo "Container status:"
            docker ps | grep jobi
            echo ""
            # Test endpoint
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Application is responding to requests."
            else
              echo "⚠️ Application may still be starting up."
              echo "Checking logs..."
              docker logs jobi-nextjs --tail 20
            fi
          else
            echo "❌ Deployment failed! Containers are not running."
            echo ""
            echo "Container status:"
            docker ps -a | grep jobi || echo "No containers found"
            echo ""
            echo "=== Next.js logs ==="
            docker logs jobi-nextjs --tail 50 2>&1 || echo "No Next.js container found"
            echo ""
            echo "=== MongoDB logs ==="
            docker logs jobi-mongodb --tail 50 2>&1 || echo "No MongoDB container found"
            exit 1
          fi
          
          # Clean up unused Docker resources (after success check)
          docker system prune -f

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment to VPS completed successfully!"
        else
          echo "❌ Deployment to VPS failed!"
        fi